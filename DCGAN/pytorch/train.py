# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rDoYrJXNLHNhS_MH7znDOEa9zKdAHkfh
"""
import os
import argparse
import numpy as np
import torch

from torch.utils.data import DataLoader
from torchvision import datasets, transforms
#from data_loader import MnistDataLoader
from trainer import Trainer
import utils

def main():
  device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    
  dataset = datasets.MNIST(root=FLAGS.data_dir, download=True,
                             transform=transforms.Compose([
                             transforms.Resize(64),
                             transforms.ToTensor(),
                             transforms.Normalize((0.5,), (0.5,))
                             ]))
  assert dataset
  dataloader = DataLoader(dataset, batch_size=FLAGS.batch_size,
                          shuffle=True, num_workers=4)
  trainer = Trainer(device,dataloader,FLAGS.image_channel,FLAGS.hidden_channel,FLAGS.z_dim,FLAGS.lr)
  trainer.train(FLAGS.epochs)
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='DCGAN')
    parser.add_argument('--cuda', type=utils.boolean_string, default=True, help='enable CUDA.')
    parser.add_argument('--train', type=utils.boolean_string, default=True, help='train mode or eval mode.')
    parser.add_argument('--data_dir', type=str, default='', help='Directory for dataset.')
    parser.add_argument('--out_dir', type=str, default='output', help='Directory for output.')
    parser.add_argument('--epochs', type=int, default=50, help='number of epochs')
    parser.add_argument('--batch_size', type=int, default=128, help='size of batches in training')
    parser.add_argument('--test_batch_size', type=int, default=4, help='size of batches in inference')
    parser.add_argument('--lr', type=float, default=0.0002, help='learning rate')
    parser.add_argument('--log_interval', type=int, default=10, help='interval between logging and image sampling')
    parser.add_argument('--seed', type=int, default=1, help='random seed')
    parser.add_argument('--z_dim', type=int, default=100)
    parser.add_argument('--image_channel', type=int, default=1)
    parser.add_argument('--hidden_channel', type=int, default=64)
    
    FLAGS = parser.parse_args()
    FLAGS.cuda = FLAGS.cuda and torch.cuda.is_available()

    if FLAGS.seed is not None:
        torch.manual_seed(FLAGS.seed)
        if FLAGS.cuda:
            torch.cuda.manual_seed(FLAGS.seed)
        np.random.seed(FLAGS.seed)
    log_file = os.path.join(FLAGS.out_dir, 'log.txt')
    print("Logging to {}\n".format(log_file))   
    main()

